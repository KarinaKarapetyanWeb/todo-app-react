{"version":3,"sources":["components/app-header/index.js","components/app-header/app-header.js","components/search-panel/index.js","components/search-panel/search-panel.js","components/todo-list-item/index.js","components/todo-list-item/todo-list-item.js","components/todo-list/index.js","components/todo-list/todo-list.js","components/item-status-filter/index.js","components/item-status-filter/item-status-filter.js","components/item-add-form/index.js","components/item-add-form/item-add-form.js","components/app/index.js","components/app/app.js","index.js"],"names":["AppHeader","toDo","done","className","SearchPanel","state","term","onSearchChange","e","target","value","toLowerCase","setState","props","type","placeholder","this","onChange","Component","TodoListItem","label","onDeleted","onToggleImportant","onToggleDone","classNames","important","onClick","TodoList","todos","elements","map","item","id","itemProps","key","ItemStatusFilter","buttons","name","currentFilter","onFilterChange","clazz","ItemAddForm","onLabelChange","evt","onSubmit","preventDefault","onItemAdded","alert","App","maxId","todoData","createTodoItem","filter","deleteItem","idx","findIndex","el","before","slice","after","addItem","text","newItem","toggleProperty","arr","propName","oldItem","items","length","indexOf","visibleItems","search","doneCount","todoCount","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4eb6603c.chunk.js","sourcesContent":["import AppHeader from './app-header';\n\nexport default AppHeader;","import React from 'react';\nimport './app-header.css';\n\nconst AppHeader = ({toDo, done}) => {\n  return (\n    <div className=\"app-header d-flex\">\n      <h1>Todo List</h1>\n      <h2>{toDo} more to do, {done} done</h2>\n    </div>\n  );\n};\n\nexport default AppHeader;","import SearchPanel from './search-panel';\n\nexport default SearchPanel;","import React, { Component } from 'react';\nimport './search-panel.css';\n\nexport default class SearchPanel extends Component {\n\n  // Экспериментальный синтаксис полей классов, state объявлен не внутри родительского конструктора\n\n  state = {\n  \tterm: ''\n  };\n\n  // Свойство, которое не вошло в стандарт, \"поля классов\" (\"class fields\") \n  //- позволяет писать метод класса внутри тела класса без вызова родительского конструктора и метода super\n\n  onSearchChange = (e) => {\n  \tconst term = e.target.value.toLowerCase();\n  \tthis.setState({ term });\n  \tthis.props.onSearchChange(term);\n  };\n\n  render() {\n  \treturn (\n  \t\t<input type=\"text\" \n  \t\t\t   className=\"form-control search-input\" \n  \t\t\t   placeholder=\"type to search\" \n  \t\t\t   value={this.state.term}\n  \t\t\t   onChange={this.onSearchChange}/>\n    );\n  }\n}","import TodoListItem from './todo-list-item';\n\nexport default TodoListItem;","import React, { Component } from 'react';\nimport './todo-list-item.css';\n\nexport default class TodoListItem extends Component {\n\n  constructor() {\n    super();\n  }\n\n  render () {\n\n    // Деструктуризация объекта props\n\n    const { label, onDeleted, onToggleImportant, onToggleDone, done, important} = this.props; \n\n    let classNames = 'todo-list-item';\n    if (done) {\n      classNames += ' done';\n    }\n\n    if (important) {\n      classNames += ' important';\n    }\n\n    // onDeleted, onToggleImportant, onToggleDone - кастомные события, которые нам передаются от \"todo-list\" через props, \n    // который в свою очередь получает их от компонента \"app\" \n    // через события данные поднимаются \"вверх\" по иерархии компонентов\n\n    return (\n      <span className={classNames}>\n        <span\n          className=\"todo-list-item-label\"\n          onClick={onToggleDone}>\n          {label}\n        </span>\n\n        <button type=\"button\"\n                className=\"btn btn-outline-success btn-sm float-right\">\n          <i className=\"fa fa-exclamation\" onClick={onToggleImportant}/>\n        </button>\n\n        <button type=\"button\"\n                className=\"btn btn-outline-danger btn-sm float-right\">\n          <i className=\"fa fa-trash-o\" onClick={onDeleted}/>\n        </button>\n      </span>\n    );\n  }\n}","import TodoList from './todo-list';\n\nexport default TodoList;","import React from 'react';\nimport TodoListItem from '../todo-list-item';\nimport './todo-list.css';\n\n// { todos, onDeleted, onToggleImportant, onToggleDone } - Деструктуризация объекта props\n\nconst TodoList = ({ todos, onDeleted, onToggleImportant, onToggleDone }) => {\n  \n  // Деструктуризация объекта props\n  \n  const elements = todos.map((item) => {\n    const { id, ...itemProps } = item;\n\n    return (\n      <li key={id} className=\"list-group-item\">\n        <TodoListItem {...itemProps } \n        onDeleted={() => onDeleted(id)}\n        onToggleImportant={() => onToggleImportant(id)}\n        onToggleDone={() => onToggleDone(id)}/>\n      </li>\n    );\n  });\n\n  return (\n    <ul className=\"list-group todo-list\">\n      { elements }\n    </ul>\n  );\n};\n\nexport default TodoList;","import ItemStatusFilter from './item-status-filter';\n\nexport default ItemStatusFilter;"," import React, { Component } from 'react';\nimport './item-status-filter.css';\n\nexport default class ItemStatusFilter extends Component {\n\n  buttons = [\n    { name: 'all', label: 'All' }, \n    { name: 'active', label: 'Active' }, \n    { name: 'done', label: 'Done' }\n  ];\n\n  render() {\n\n    // Деструктуризация объекта props\n\n    const { currentFilter, onFilterChange } = this.props;\n\n    const buttons = this.buttons.map(({ name, label }) => {\n      const isActive = currentFilter === name;\n      const clazz = isActive ? 'btn-info' : 'btn-outline-secondary';\n      return <button type=\"button\"\n                     className={`btn ${clazz}`}\n                     key={name}\n                     onClick={() => onFilterChange(name)}>\n                {label}\n             </button>\n    });\n\n    return (\n      <div className=\"btn-group\">\n        {buttons}\n      </div>\n    );\n  }\n}\n\n","import ItemAddForm from './item-add-form';\n\nexport default ItemAddForm;","import React, { Component } from 'react';\nimport './item-add-form.css';\n\nexport default class ItemAddForm extends Component {\n\t// Экспериментальный синтаксис полей классов, state объявлен не внутри родительского конструктора\n\n\tstate = {\n\t\tlabel: ''\n\t};\n\n\t// Свойство, которое не вошло в стандарт, \"поля классов\" (\"class fields\") \n    //- позволяет писать метод класса внутри тела класса без вызова родительского конструктора и метода super\n\n\tonLabelChange = (evt) => {\n\t\tthis.setState({\n\t\t  label: evt.target.value \n\t\t});\n\t};\n\n\tonSubmit = (evt) => {\n\t\tevt.preventDefault();\n\t\tif (!this.state.label) {\n\t\t  alert('Введите значение в поле');\n\t\t} else {\n\t\t\tthis.props.onItemAdded(this.state.label);\n\t\t\tthis.setState({\n\t\t\t  label: ''\n\t\t\t});\n\t\t}\n\t};\n\t// Инпут контролируемый элемент, поскольку value получает из state\n\t// State - единственный источник истины\n\n\trender() {\n\t\treturn (\n\t\t\t<form className=\"item-add-form d-flex\" onSubmit={this.onSubmit}>\n\t\t\t\t<input type=\"text\" className=\"form-control\" onChange={this.onLabelChange} value={this.state.label} placeholder=\"What needs to be done\" />\n\t\t\t\t<button className=\"btn btn-outline-secondary\">Add&nbsp;Item</button>\n\t\t\t</form>\n\t\t)\n\t}\n}\n","import App from './app';\n\nexport default App;","import React, {Component} from 'react';\nimport ReactDOM from 'react-dom';\n\nimport AppHeader from '../app-header';\nimport SearchPanel from '../search-panel';\nimport TodoList from '../todo-list';\nimport ItemStatusFilter from '../item-status-filter';\nimport ItemAddFrom from '../item-add-form';\n\nimport './app.css';\n\nexport default class App extends Component {\n\n  maxId = 100;\n\n  // Экспериментальный синтаксис полей классов, state объявлен не внутри родительского конструктора\n\n  state = {\n    // Создаем массив первоначальных данных\n    todoData: [\n      this.createTodoItem('Drink Coffee'),\n      this.createTodoItem('Make Awesome App'),\n      this.createTodoItem('Have a lunch')\n    ],\n    term: '',\n    filter: 'all' // active, all, done\n  };\n\n  // Свойство, которое не вошло в стандарт, \"поля классов\" (\"class fields\") \n  //- позволяет писать метод класса внутри тела класса без вызова родительского конструктора и метода super\n\n  createTodoItem (label) {\n    return {\n      label,\n      important: false, \n      done: false,\n      id: this.maxId++\n    };\n  }\n\n  deleteItem = (id) => {\n\n    // Setstate работает асинхронно, \n    // поэтому когда нам надо изменить state в зависимости от его старого значения, \n    // надо принять на вход метода Setstate - старый state в виде аргумента функции (важно, что мы не передаем просто объект)\n    // { todoData } - деструктуризация объекта state, запись в переменную свойства state: todoData\n\n    this.setState(({ todoData }) => {\n      // находим индекс того элемента, который надо удалить \n      const idx = todoData.findIndex((el) => el.id === id);\n      // чтобы не изменять существующий массив, используем метод slice, где находим все эл-ты до/после удаляемого \n      const before = todoData.slice(0, idx);\n      const after = todoData.slice(idx + 1);\n      // используем оператор spread, чтобы создать новый массив на основе двух других\n      const newArray = [ ...before, ...after];\n      // можно сократить запись \n      // const newArray = [ ...todoData.slice(0, idx), ...todoData.slice(idx + 1)];\n\n\n      return {\n        todoData: newArray\n      }\n    });\n  };\n\n  addItem = (text) => {\n    const newItem = this.createTodoItem(text);\n\n    // { todoData } - деструктуризация объекта state\n    this.setState(({todoData}) => {\n      const newArr = [\n        ...todoData,\n        newItem\n      ];\n\n      return {\n        todoData: newArr\n      };\n    });\n  };\n\n  toggleProperty (arr, id, propName) {\n    const idx = arr.findIndex((el) => el.id === id);\n    const oldItem = arr[idx];\n    // [propName] перезапишет свойство старого объекта\n    const newItem = {...oldItem, [propName]: !oldItem[propName]};\n\n    const before = arr.slice(0, idx);\n    const after = arr.slice(idx + 1);\n\n    // возвращаем новый массив, вместо удаленного элемента - добавляется новый с обновленным свойством\n    return [ ...before, newItem, ...after];\n  };\n\n  onToggleDone = (id) => {\n    // { todoData } - деструктуризация объекта state\n    this.setState(({todoData}) => {\n     return {\n      todoData: this.toggleProperty(todoData, id, 'done')\n     };\n    });\n  };\n\n  onToggleImportant = (id) => {\n    // { todoData } - деструктуризация объекта state\n    this.setState(({todoData}) => {\n     return {\n      todoData: this.toggleProperty(todoData, id, 'important')\n     };\n    });\n  };\n\n  onSearchChange = (term) => {\n    // { term } - деструктуризация объекта state\n    this.setState( {term} );\n  };\n\n  onFilterChange = (filter) => {\n    // { filter } - деструктуризация объекта state\n    this.setState( {filter} );\n  };\n\n  search(items, term) {\n    if (term.length === 0) {\n      return items;\n    }\n\n    return items.filter((item) => {\n      return item.label.toLowerCase().indexOf(term) > -1;\n    });\n  }\n\n  filter(items, filter) {\n    switch(filter) {\n      case 'all':\n        return items;\n      case 'active':\n        return items.filter((item) => !item.done);\n      case 'done': \n        return items.filter((item) => item.done);\n      default: \n        return items;\n    }\n  }\n\n  render () {\n\n    // Деструктуризация объекта state\n\n    const { todoData, term, filter } = this.state;\n\n    // Метод filter создает новый массив, поэтому мы не изменяем старый\n\n    const visibleItems = this.filter(this.search(todoData, term), filter);\n\n    const doneCount = todoData.filter((el) => el.done).length;\n\n    const todoCount = todoData.length - doneCount;\n\n    return (\n      <div className=\"todo-app\">\n        <AppHeader toDo={todoCount} done={doneCount} />\n        <div className=\"top-panel d-flex\">\n          <SearchPanel \n            onSearchChange={this.onSearchChange}/>\n          <ItemStatusFilter currentFilter={filter} onFilterChange={this.onFilterChange}/>\n        </div>\n\n        <TodoList todos={visibleItems} onDeleted={this.deleteItem} onToggleImportant={this.onToggleImportant} onToggleDone={this.onToggleDone}/>\n\n        <ItemAddFrom onItemAdded={ this.addItem }/>\n      </div>\n    );\n  }\n};\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './components/app';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}